
#include <iostream>
#include <string>

using namespace std;

template <class T>
class hashTable
{
private:
	int length;
	int HTableSize;
	T* value_arr; //Will hold Values in an array of zize 10                  tama√±o
	string* key_arr; // Will hold Names in an array of zize 10                   nombres
	int* status_arr; // Will hold (0 for Empty, 1 for there is data, -1 for deleted)               vacio o lleno,pero no funciona xd
	int hashFunction(string key); // Name Length - 1 % Size of Array

public:
	hashTable(int Size = 10); T& operator[] (string);
	~hashTable(); //Destructor Working
	void add(string key, const T& value);
	bool exists(string key);
	
	void remove(string key);
	T& item(string key);


};

//-----------------------------------------item---------------------------------
template <class T>
T& hashTable<T>::item(string key)
{
	hashFunction(key);
	int hashIndex;
	hashIndex = hashFunction(key);
	return value_arr[hashIndex];

}


//--------------------------------------hashTable-------------------------------template <class T>
template <class T>
hashTable<T>::hashTable(int Size )
{
//	int Size = 10;
	value_arr = new T[Size];
	key_arr = new string[Size];
	status_arr = new int[Size];
	HTableSize = Size;
	for (int i = 0; i < Size; i++)
		status_arr[i] = 0;
}
//-------------------------------------hashFunction-----------------------------

template <class T>
int hashTable<T>::hashFunction(string key)
{
	return (key.length() - 1) % HTableSize; //hashFunction

}
//-------------------------------------------add--------------------------------

template <class T>
void hashTable<T>::add(string key, const T& value)
{
	int hashIndex;
	hashIndex = hashFunction(key); //(key.length() - 1) % HTableSize;

	if (status_arr[hashIndex] != 1)
	{
		key_arr[hashIndex] = key;
		value_arr[hashIndex] = value;
		status_arr[hashIndex] = 1;
	}
	else
	{
		if (status_arr[hashIndex] == 1)
		{
			hashIndex++;
		}
		else
		{
			key_arr[hashIndex] = key;
			value_arr[hashIndex] = value;
			status_arr[hashIndex] = 1;
		}
	}
}
//----------------------------------------Exists--------------------------------template <class T>
template <class T>
bool hashTable<T>::exists(string key)
{
	bool exists;
	int hashIndex;
	hashFunction(key);
	hashIndex = hashFunction(key);
	if (status_arr[hashIndex] == 1)
		exists = true;
	else
		exists = false;

	return exists;

}
//----------------------------------------Remove--------------------------------template <class T>
template <class T>
void hashTable<T>::remove(string key)
{
	int hashIndex;
	hashIndex = hashFunction(key); //hashIndex = (key.length() - 1) % HTableSize;
	value_arr[hashIndex] = 0;
	status_arr[hashIndex] = -1;

}



//--------------------------------------~hashTable------------------------------template <class T>
template <class T>
hashTable<T>::~hashTable() //destructor will call clear
{
}


//----------------------------------------Operator Overload---------------------template <class T>
template <class T>
T& hashTable<T>::operator [](string key)
{
	int hashIndex;
	hashIndex = hashFunction(key); //hashIndex = (key.length() - 1) % HTableSize;
	key_arr[hashIndex] = key;
	status_arr[hashIndex] = 1;
	return value_arr[hashIndex];
}



int main()
{
	hashTable<float>obj;
	obj.add("Kirby", 10.5);
	obj.add("Jared", 7.5);
	obj.add("Mary", 5.5);
	obj.add("Ted", 8.0);
	obj.add("Enrique", 18.6);
	cout << "valor de  Kirby: " << obj["Kirby"] << endl;

	cout << "valor de Mary: " << obj["Mary"] << endl;
	cout << "valor de Jared: " << obj["Jared"] << endl;
	obj.exists("Jared");

	obj.item("Kirby");
	obj.remove("Ted");// remueve el valor del hash y aparecera "0"
	obj.exists("Kirby");
	
	cout << "valor de Mary: " << obj["Mary"] << endl;
	cout << "valor de Jared: " << obj["Jared"] << endl;
	cout << "valor de Ted: " << obj["Ted"] << endl;
	cout << " El valor de enrique es  : " << obj["Enrique"] << endl;

	system("PAUSE");
	return 0;

}
